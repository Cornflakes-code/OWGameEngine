#pragma once

#include <glm/glm.hpp>

#ifndef __gl_h_
#include <glad/glad.h>
#endif
#include <map>
#include <vector>

#include <ft2build.h>
#include FT_FREETYPE_H

#include "ResourceSource.h"
#include "./Renderables/BoundingBox.h"
#include <Core/GLApplication.h>
#include "../Helpers/CommonUtils.h"
#include "ResourceFactory.h"

class Shader;

class FontAtlas: public ResourceSource, public ListenerHelper
{
public:
	FontAtlas(Shader* shader);
	~FontAtlas();
	void dynamicText(bool newValue = false) { mDynamicText = newValue; }
	void setFont(const std::string& fileName, int fontHeight);
	void color(const glm::vec4& newValue) { mColor = newValue; }
	void createText(const std::string& text, float sx, float sy);
	AABB findBounds() const;
	const std::vector<glm::vec4>& vertices() const { return mVertices; }
	void render(const glm::mat4& proj, const glm::mat4& view, float zed,
		const AABB& bounds);
private:
	Shader* mShader;
	bool mDynamicText;
	GLuint mVao;
	GLuint vbo;
	std::vector<glm::vec4> mVertices;
	glm::vec4 mColor;

	// Maximum texture width	
	const FreeType::FontDetails* mFontData;
	bool mAspectRatioInvalidated = true;
	glm::vec2 mStaticTextSize = { 0.5f, 0.5f };
	void resizeCallback(GLApplication::WindowResizeType resizeType, glm::ivec2 dimensions);
};
